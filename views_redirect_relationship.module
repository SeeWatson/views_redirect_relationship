<?php
/**
 * @file
 * Implements hooks and generates nid connectors.
 */

/**
 * Implements hook_view_api().
 */
function views_redirect_relationship_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'views_redirect_relationship') . '/views',
  );
}

/**
 * Implements hook_menu().
 */
function views_redirect_relationship_menu() {
  $items['admin/config/search/redirect/views_redirect_relationship/generate'] = array(
    'title' => 'Re-generate Relationship NIDs (try if relationships are not working)',
    'page callback' => 'views_redirect_relationship_generate_all',
    'page arguments' => array(
      'admin/config/search/redirect',
    ),
    'access arguments' => array(
      'administer redirects',
    ),
    'type' => MENU_LOCAL_ACTION,
  );
  return $items;
}

/**
 * Implements hook_redirect_presave().
 */
function views_redirect_relationship_redirect_presave($redirect) {
  // Add relationship info during presave stage.
  $redirect->nid = views_redirect_relationship_generate($redirect->redirect);
}

/**
 * Helper function that returns the node id from the destination.
 */
function views_redirect_relationship_generate($destination) {
  // Redirect destination could be internal path, path alias or external URL,
  // relationship should be generated for first two cases. Route "<front>"
  // not supported because of complexity introduced by the fact that frontpage
  // can change.
  if (preg_match('~(?P<nodetext>node/)(?P<nid>\d+)~', drupal_get_normal_path($destination), $matches)) {
    return $matches['nid'];
  }

  return 0;
}

/**
 * Callback function used to generate nid values.
 *
 * If {redirect}.redirect is a node reference,
 * convert it to simple nid and save it in {redirect}.nid
 *
 * @see views_redirect_relationship_menu()
 * @see views_redirect_relationship_enable()
 */
function views_redirect_relationship_generate_all($forward = FALSE) {
  try {
    $query = db_select('redirect', 'r')
      ->fields('r', array('rid'))
      ->condition('redirect', 'node/[0-9]+', 'REGEXP')
      ->execute()->fetchAllAssoc('rid');

    foreach (redirect_load_multiple(array_keys($query)) as $redirect) {
      // Resave redirects, presave hook will populate missing data.
      redirect_save($redirect);
    }
  }
  catch (Exception $e) {
    drupal_set_message($e->getMessage(), 'error', FALSE);
  }

  drupal_set_message(t('The redirect to node relationships were created successfully.'), 'status');

  if ($forward) {
    drupal_goto($forward);
  }
}
